"use client";
import React, { useState } from "react";
import { FaCheckCircle, FaTimesCircle, FaQuestionCircle } from "react-icons/fa";

const MiniQuiz_Day53 = ({ theme }) => {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(0);
  const [incorrect, setIncorrect] = useState([]);

  const questions = [
    {
      id: "q1",
      question: "‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ BERT ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏á‡∏Å‡∏≤‡∏£ NLP ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
      options: [
        "‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£ pre-train ‡πÅ‡∏ö‡∏ö bidirectional ‡∏ö‡∏ô unlabeled data",
        "‡πÉ‡∏ä‡πâ LSTM multi-layer deep stack",
        "‡πÉ‡∏ä‡πâ convolutional layers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ context"
      ],
      correct: 0,
    },
    {
      id: "q2",
      question: "‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏° GPT ‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î?",
      options: [
        "‡πÉ‡∏ä‡πâ encoder-decoder ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö",
        "‡πÉ‡∏ä‡πâ decoder-only architecture ‡πÅ‡∏•‡∏∞ auto-regressive pretraining",
        "‡πÉ‡∏ä‡πâ encoder-only architecture ‡∏ó‡∏µ‡πà mask token"
      ],
      correct: 1,
    },
    {
      id: "q3",
      question: "‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á BERT ‡∏Å‡∏±‡∏ö GPT?",
      options: [
        "BERT ‡πÄ‡∏õ‡πá‡∏ô bidirectional ‡∏™‡πà‡∏ß‡∏ô GPT ‡πÄ‡∏õ‡πá‡∏ô unidirectional",
        "BERT ‡πÉ‡∏ä‡πâ recurrent layers ‡∏™‡πà‡∏ß‡∏ô GPT ‡πÉ‡∏ä‡πâ convolutional layers",
        "GPT ‡πÑ‡∏°‡πà‡∏°‡∏µ positional encoding ‡πÉ‡∏ô architecture"
      ],
      correct: 0,
    },
    {
      id: "q4",
      question: "Key Innovation ‡∏ó‡∏µ‡πà GPT ‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
      options: [
        "Auto-regressive pretraining ‡πÅ‡∏•‡∏∞ fine-tune ‡∏Å‡∏±‡∏ö task-specific dataset",
        "Self-supervised learning ‡πÅ‡∏ö‡∏ö fully masked",
        "‡πÉ‡∏ä‡πâ multi-head attention ‡πÅ‡∏ö‡∏ö depth-wise separable"
      ],
      correct: 0,
    },
    {
      id: "q5",
      question: "‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• Transformer-based ‡πÉ‡∏ô production ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
      options: [
        "Bias ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ pretrain",
        "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ generalize ‡∏Ç‡πâ‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤",
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ fine-tune ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö domain-specific data"
      ],
      correct: 0,
    },
  ];

  const handleChange = (qid, index) => {
    setAnswers({ ...answers, [qid]: index });
  };

  const handleSubmit = () => {
    let newScore = 0;
    let wrong = [];

    questions.forEach((q) => {
      const userAnswer = answers[q.id];
      if (userAnswer === q.correct) {
        newScore++;
      } else {
        wrong.push({
          id: q.id,
          question: q.question,
          yourAnswer: q.options[userAnswer],
          correctAnswer: q.options[q.correct],
        });
      }
    });

    setScore(newScore);
    setIncorrect(wrong);
    setSubmitted(true);
  };

  const getFeedback = (qid, index) => {
    if (!submitted) return <FaQuestionCircle className="text-gray-400" />;
    return questions.find((q) => q.id === qid).correct === index ? (
      <FaCheckCircle className="text-green-500" />
    ) : (
      <FaTimesCircle className="text-red-500" />
    );
  };

  return (
    <section id="quiz" className="bg-black/60 text-white rounded-xl p-6 mt-12 border border-yellow-500 shadow-lg">
      <h2 className="text-2xl font-semibold mb-6 flex items-center gap-2">
        <FaQuestionCircle className="text-yellow-500" /> Mini Quiz: BERT & GPT Architectures
      </h2>

      {questions.map((q) => (
        <div key={q.id} className="mb-6">
          <p className="mb-2 font-medium">{q.question}</p>
          <ul className="space-y-2">
            {q.options.map((opt, index) => (
              <li key={index}>
                <label className="flex items-center gap-2">
                  <input
                    type="radio"
                    name={q.id}
                    value={index}
                    onChange={() => handleChange(q.id, index)}
                    className="accent-yellow-500"
                    disabled={submitted}
                  />
                  <span>{opt}</span>
                  <span className="ml-2">{getFeedback(q.id, index)}</span>
                </label>
              </li>
            ))}
          </ul>
        </div>
      ))}

      {!submitted ? (
        <button
          onClick={handleSubmit}
          className="mt-4 px-6 py-2 bg-yellow-500 hover:bg-yellow-600 text-black font-semibold rounded-full flex items-center gap-2"
        >
          <FaCheckCircle /> ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        </button>
      ) : (
        <>
          <p className="mt-4 text-green-400 font-medium flex items-center gap-2">
            <FaCheckCircle /> ‚úÖ ‡πÑ‡∏î‡πâ {score} / {questions.length} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
          </p>

          {incorrect.length > 0 && (
            <div className="mt-4 text-red-300">
              <p className="font-semibold mb-2 flex items-center gap-2">
                <FaTimesCircle /> ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î:
              </p>
              <ul className="list-disc pl-6 space-y-2 text-sm">
                {incorrect.map((item, idx) => (
                  <li key={idx}>
                    <p>üî∏ <strong>{item.question}</strong></p>
                    <p>‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: <span className="text-red-400">{item.yourAnswer || "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"}</span></p>
                    <p>‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: <span className="text-green-400">{item.correctAnswer}</span></p>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </>
      )}
    </section>
  );
};

export default MiniQuiz_Day53;
