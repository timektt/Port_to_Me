import React, { useState } from "react";
import { FaCheckCircle, FaTimesCircle, FaQuestionCircle } from "react-icons/fa";

const MiniQuiz_Day20 = ({ theme }) => {
  const [answers, setAnswers] = useState({});
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(0);
  const [incorrect, setIncorrect] = useState([]);

  const questions = [
    {
      id: "q1",
      question: "Internal Covariate Shift ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
      options: [
        "‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á distribution ‡∏Ç‡∏≠‡∏á input ‡∏ï‡∏•‡∏≠‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å",
        "‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô shape ‡∏Ç‡∏≠‡∏á Model",
        "‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î batch ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°"
      ],
      correct: 0
    },
    {
      id: "q2",
      question: "Batch Normalization ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö Activation?",
      options: [
        "Normalize Activation ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Mini-batch",
        "‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î Layer ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
        "‡πÅ‡∏õ‡∏•‡∏á Activation ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ Binary"
      ],
      correct: 0
    },
    {
      id: "q3",
      question: "Layer Normalization ‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Batch Normalization ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
      options: [
        "LN ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Mean/Variance ‡∏Ç‡πâ‡∏≤‡∏° Batch",
        "LN ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Mean/Variance ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
        "LN ‡πÉ‡∏ä‡πâ Running Statistics"
      ],
      correct: 1
    },
    {
      id: "q4",
      question: "‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Batch Normalization ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
      options: [
        "‡∏•‡∏î Internal Covariate Shift ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å",
        "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•",
        "‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Optimizer"
      ],
      correct: 0
    },
    {
      id: "q5",
      question: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏î‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ Layer Normalization ‡πÅ‡∏ó‡∏ô Batch Normalization?",
      options: [
        "‡πÄ‡∏°‡∏∑‡πà‡∏≠ batch size ‡πÉ‡∏´‡∏ç‡πà",
        "‡πÄ‡∏°‡∏∑‡πà‡∏≠ batch size ‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô RNN, Transformer",
        "‡πÄ‡∏°‡∏∑‡πà‡∏≠ training data ‡∏°‡∏µ noise ‡∏™‡∏π‡∏á"
      ],
      correct: 1
    },
    {
      id: "q6",
      question: "Group Normalization ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£?",
      options: [
        "‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î Weight",
        "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ batch size ‡πÄ‡∏•‡πá‡∏Å",
        "‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î Layer"
      ],
      correct: 1
    },
    {
      id: "q7",
      question: "Weight Normalization ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
      options: [
        "Normalize Activations",
        "Normalize Weights ‡πÅ‡∏ó‡∏ô Activations",
        "Normalize Batch Size"
      ],
      correct: 1
    },
    {
      id: "q8",
      question: "‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå gamma (Œ≥) ‡πÅ‡∏•‡∏∞ beta (Œ≤) ‡πÉ‡∏ô Normalization ‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
      options: [
        "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Scale ‡πÅ‡∏•‡∏∞ Shift ‡∏´‡∏•‡∏±‡∏á Normalize",
        "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Batch",
        "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Learning Rate"
      ],
      correct: 0
    },
    {
      id: "q9",
      question: "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á Batch Normalization ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
      options: [
        "‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô Batch",
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö CNN ‡πÑ‡∏î‡πâ",
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö GPU"
      ],
      correct: 0
    },
    {
      id: "q10",
      question: "Insight ‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Normalization ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
      options: [
        "‡∏ó‡∏≥‡πÉ‡∏´‡πâ Loss Landscape ‡∏•‡∏≤‡∏î‡∏ä‡∏±‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°",
        "‡∏ó‡∏≥‡πÉ‡∏´‡πâ Loss Landscape ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞ Optimization ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô",
        "‡∏ó‡∏≥‡πÉ‡∏´‡πâ Batch Size ‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
      ],
      correct: 1
    }
  ];

  const handleChange = (qid, index) => {
    setAnswers({ ...answers, [qid]: index });
  };

  const handleSubmit = () => {
    let newScore = 0;
    let wrong = [];

    questions.forEach((q) => {
      const userAnswer = answers[q.id];
      if (userAnswer === q.correct) {
        newScore++;
      } else {
        wrong.push({
          id: q.id,
          question: q.question,
          yourAnswer: q.options[userAnswer],
          correctAnswer: q.options[q.correct]
        });
      }
    });

    setScore(newScore);
    setIncorrect(wrong);
    setSubmitted(true);
  };

  const getFeedback = (qid, index) => {
    if (!submitted) return <FaQuestionCircle className="text-gray-400" />;
    return questions.find((q) => q.id === qid).correct === index ? (
      <FaCheckCircle className="text-green-500" />
    ) : (
      <FaTimesCircle className="text-red-500" />
    );
  };

  return (
    <section id="quiz" className="bg-black/60 text-white rounded-xl p-6 mt-12 border border-yellow-500 shadow-lg">
      <h2 className="text-2xl font-semibold mb-6 flex items-center gap-2">
        <FaQuestionCircle className="text-yellow-500" /> Mini Quiz: BatchNorm & LayerNorm
      </h2>

      {questions.map((q) => (
        <div key={q.id} className="mb-6">
          <p className="mb-2 font-medium">{q.question}</p>
          <ul className="space-y-2">
            {q.options.map((opt, index) => (
              <li key={index}>
                <label className="flex items-center gap-2">
                  <input
                    type="radio"
                    name={q.id}
                    value={index}
                    onChange={() => handleChange(q.id, index)}
                    className="accent-yellow-500"
                    disabled={submitted}
                  />
                  <span>{opt}</span>
                  <span className="ml-2">{getFeedback(q.id, index)}</span>
                </label>
              </li>
            ))}
          </ul>
        </div>
      ))}

      {!submitted ? (
        <button
          onClick={handleSubmit}
          className="mt-4 px-6 py-2 bg-yellow-500 hover:bg-yellow-600 text-black font-semibold rounded-full flex items-center gap-2"
        >
          <FaCheckCircle /> ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        </button>
      ) : (
        <>
          <p className="mt-4 text-green-400 font-medium flex items-center gap-2">
            <FaCheckCircle /> ‚úÖ ‡πÑ‡∏î‡πâ {score} / {questions.length} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
          </p>

          {incorrect.length > 0 && (
            <div className="mt-4 text-red-300">
              <p className="font-semibold mb-2 flex items-center gap-2">
                <FaTimesCircle /> ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î:
              </p>
              <ul className="list-disc pl-6 space-y-2 text-sm">
                {incorrect.map((item, idx) => (
                  <li key={idx}>
                    <p>üî∏ <strong>{item.question}</strong></p>
                    <p>‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: <span className="text-red-400">{item.yourAnswer || "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"}</span></p>
                    <p>‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: <span className="text-green-400">{item.correctAnswer}</span></p>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </>
      )}
    </section>
  );
};

export default MiniQuiz_Day20;
